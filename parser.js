// =========================
// parser.js (—Ñ–∏–Ω–∞–ª–Ω–∞ –≤–µ—Ä—Å–∏—è)
// =========================

// –ü–æ-–≥—ä–≤–∫–∞–≤–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω–∏ —Å–∞–π—Ç–æ–≤–µ
const SELECTORS = [
  'article',                     // OFFNews, Dnevnik, Mediapool
  '.article-item',               // Kapital, Dnevnik
  '.post',                       // bTV
  '.news-item',                  // OFFNews
  '.story',                      // BBC
  '.c-article',                  // Mediapool
  '.l-article',                  // –¥—Ä—É–≥–∏
].join(',');

function selectRawBlocks(doc){
  return Array.from(doc.querySelectorAll(SELECTORS));
}

function toCardElement(rawHTML, baseHref){
  const fragDoc = parseHTML('<div id="wrap">'+rawHTML+'</div>');
  const wrap = fragDoc.getElementById('wrap');
  sanitize(wrap);
  fixRelativeURLs(wrap, baseHref);

  // –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const img = wrap.querySelector('img');
  const imgSrc = img?.getAttribute('src') || '';

  // –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –∑–∞–≥–ª–∞–≤–∏–µ
  const h = wrap.querySelector('h1,h2,h3,h4');
  const title = (h?.textContent || wrap.querySelector('a[href]')?.textContent || wrap.textContent || '(–±–µ–∑ –∑–∞–≥–ª–∞–≤–∏–µ)').trim();

  // –õ–∏–Ω–∫
  const rawLink = (h?.querySelector('a[href]')?.getAttribute('href')) || wrap.querySelector('a[href]')?.getAttribute('href') || '';
  const linkAbs = rawLink ? absURL(baseHref, rawLink) : '';

  // –î–∞—Ç–∞
  let isoDate = '', formattedDate = '';
  const t = wrap.querySelector('time[datetime]') || wrap.querySelector('meta[property="article:published_time"]');
  const dateText = t ? (t.getAttribute('datetime') || t.content || '') : '';
  if (dateText) {
    const d = new Date(dateText);
    if (!isNaN(d)) {
      isoDate = d.toISOString();
      formattedDate = d.toLocaleString('bg-BG',{dateStyle:'medium', timeStyle:'short'});
    }
  }

  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–∞–∫–æ –∏–º–∞)
  const breadcrumb = wrap.querySelector('li.breadcrumb-item, .category, .news-category');
  const category = breadcrumb ? breadcrumb.textContent.trim() : '';

  // –ò–∑—Ç–æ—á–Ω–∏–∫ (–¥–æ–º–µ–Ω)
  let source = ''; 
  try { source = new URL(baseHref).hostname.replace(/^www\./,''); } catch {}

  // –ö–∞—Ä—Ç–∞
  const card = document.createElement('div');
  card.className = 'card-row';
  if (isoDate) card.dataset.date = isoDate;
  if (category) card.dataset.category = category;
  if (linkAbs) card.dataset.href = linkAbs;

  card.innerHTML = `
    <div class="thumb">${imgSrc?`<img src="${imgSrc}" alt="">`:'<span>no image</span>'}</div>
    <div class="right-side">
      <div class="header-row">
        <h3 class="title"><a href="#">${title}</a></h3>
        ${formattedDate?`<div class="meta-date">üïí ${formattedDate}</div>`:''}
      </div>
      <div class="meta">${source}${category?` ‚Ä¢ ${category}`:''}</div>
    </div>`;

  // –û—Ç–≤–∞—Ä—è–Ω–µ –≤ —á–µ—Ç–µ—Ü–∞
  card.querySelector('a').addEventListener('click', e=>{
    e.preventDefault();
    const href = card.dataset.href || '';
    if (!href) { setStatus('‚ùå –õ–∏–ø—Å–≤–∞ –ª–∏–Ω–∫ –∫—ä–º —Å—Ç–∞—Ç–∏—è.'); return; }
    openReader(href);
  });

  return card;
}

// –ò–º–ø–æ—Ä—Ç –Ω–∞ URL (–∑–∞—Ä–µ–∂–¥–∞–Ω–µ –ø—Ä–µ–∑ —Ç–≤–æ—è Cloudflare proxy)
async function importURL(url){
  if(!url){ setStatus('–ù–µ–≤–∞–ª–∏–¥–µ–Ω URL.'); return; }
  setStatus('‚è≥ –ó–∞—Ä–µ–∂–¥–∞–º –Ω–æ–≤–∏–Ω–∏‚Ä¶');
  try{
    // ‚úÖ –ò–∑–ø–æ–ª–∑–≤–∞–º–µ —Ç–≤–æ—è Cloudflare Worker proxy
    const prox = `https://tight-wildflower-8f1a.s-milchev1.workers.dev/?url=${encodeURIComponent(url)}`;
    const res  = await fetch(prox, {mode:'cors'});
    if(!res.ok) throw new Error('HTTP '+res.status);
    const html = await res.text();

    const doc  = parseHTML(html);
    renderCardsFromDoc(doc, url);
    setStatus('');
  }catch(e){ 
    setStatus('‚ùå CORS/HTTP –≥—Ä–µ—à–∫–∞: '+e.message); 
  }
}

// –†–µ–Ω–¥–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∏—Ç–µ
function renderCardsFromDoc(doc, baseHref){
  const listEl = $('#list'); 
  listEl.innerHTML = '';
  const raw = selectRawBlocks(doc);
  if(!raw.length){ 
    listEl.innerHTML = '<div class="placeholder">–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –µ–ª–µ–º–µ–Ω—Ç–∏.</div>'; 
    return; 
  }
  raw.forEach(node => listEl.appendChild(toCardElement(node.outerHTML, baseHref)));
  populateCategories();
}