// ============================
// ‚úÖ parser.js ‚Äî —Å—Ç–∞–±–∏–ª–µ–Ω, –±–µ–∑ –∫–µ—à, –±–µ–∑ –æ–±—ä—Ä–∫–≤–∞–Ω–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏–∏
// (–º–∞–∫—Å–∏–º–∞–ª–Ω–æ –±–ª–∏–∑–æ –¥–æ –ø—Ä–µ–¥–∏—à–Ω–∞—Ç–∞ —Ç–∏ –ª–æ–≥–∏–∫–∞)
// ============================

const SELECTORS = [
  'article',
  '.article-item',
  '.post',
  '.news-item',
  '.story',
  '.c-article',
  '.l-article'
].join(',');

// ‚Äî‚Äî‚Äî –≤—ä—Ç—Ä–µ—à–Ω–æ anti-race id, –∑–∞ –¥–∞ –∏–≥–Ω–æ—Ä–∏—Ä–∞–º–µ –ø–æ-—Å—Ç–∞—Ä–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏
let __newsReqId = 0;

// –ò–∑–±–∏—Ä–∞ raw –±–ª–æ–∫–æ–≤–µ—Ç–µ —Å—ä—Å —Å—Ç–∞—Ç–∏–∏ –æ—Ç HTML
function selectRawBlocks(doc){
  return Array.from(doc.querySelectorAll(SELECTORS));
}

// –ö–∞—Ä—Ç–∞ –æ—Ç raw HTML
function toCardElement(rawHTML, baseHref){
  const fragDoc = parseHTML('<div id="wrap">'+rawHTML+'</div>');
  const wrap = fragDoc.getElementById('wrap');
  sanitize(wrap);
  fixRelativeURLs(wrap, baseHref);

  const img = wrap.querySelector('img');
  const imgSrc = img?.getAttribute('src') || '';

  const h = wrap.querySelector('h1,h2,h3,h4');
  const title = (h?.textContent || wrap.querySelector('a[href]')?.textContent || '(–±–µ–∑ –∑–∞–≥–ª–∞–≤–∏–µ)').trim();

  const rawLink = (h?.querySelector('a[href]')?.getAttribute('href')) || wrap.querySelector('a[href]')?.getAttribute('href') || '';
  const linkAbs = rawLink ? absURL(baseHref, rawLink) : '';

  let isoDate = '', formattedDate = '';
  const t = wrap.querySelector('time[datetime]') || wrap.querySelector('meta[property="article:published_time"]');
  const dateText = t ? (t.getAttribute('datetime') || t.content || '') : '';
  if (dateText) {
    const d = new Date(dateText);
    if (!isNaN(d)) {
      isoDate = d.toISOString();
      formattedDate = d.toLocaleString('bg-BG',{dateStyle:'medium', timeStyle:'short'});
    }
  }

  // –æ–ø–∏—Ç –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–∞–∫–æ –∏–º–∞)
  const breadcrumb = wrap.querySelector('li.breadcrumb-item, .category, .news-category');
  const category = breadcrumb ? breadcrumb.textContent.trim() : '';

  let source = '';
  try { source = new URL(baseHref).hostname.replace(/^www\./,''); } catch {}

  const card = document.createElement('div');
  card.className = 'card-row';
  if (isoDate) card.dataset.date = isoDate;
  if (category) card.dataset.category = category;
  if (linkAbs) card.dataset.href = linkAbs;

  card.innerHTML = `
    <div class="thumb">${imgSrc ? `<img src="${imgSrc}" alt="">` : '<span>no image</span>'}</div>
    <div class="right-side">
      <div class="header-row">
        <h3 class="title">
          <a href="${linkAbs || '#'}" target="_blank" rel="noopener noreferrer" style="cursor:pointer">${title}</a>
        </h3>
        ${formattedDate ? `<div class="meta-date">üïí ${formattedDate}</div>` : ''}
      </div>
      <div class="meta">${source}${category?` ‚Ä¢ ${category}`:''}</div>
    </div>`;

  card.querySelector('a').addEventListener('click', e=>{
    e.preventDefault();
    const href = card.dataset.href || '';
    if (!href) { setStatus('‚ùå –õ–∏–ø—Å–≤–∞ –ª–∏–Ω–∫ –∫—ä–º —Å—Ç–∞—Ç–∏—è.'); return; }
    openReader(href);
  });

  return card;
}

// –ò–º–ø–æ—Ä—Ç –ø–æ URL ‚Äî —Å—Ç–∞–±–∏–ª–µ–Ω, –±–µ–∑ –∫–µ—à + fallback proxy
async function importURL(url){
  if(!url){ setStatus('–ù–µ–≤–∞–ª–∏–¥–µ–Ω URL.'); return; }
  const reqId = ++__newsReqId;

  setStatus('‚è≥ –ó–∞—Ä–µ–∂–¥–∞–º –Ω–æ–≤–∏–Ω–∏‚Ä¶');
  const listEl = $('#list');
  listEl.innerHTML = '';

  // –¥–æ–±–∞–≤—è–º–µ cache-buster –∫—ä–º —Å–∞–º–∏—è URL (–∑–∞ —Å–µ–∫—Ü–∏–∏ –Ω–∞ –µ–¥–∏–Ω –∏ —Å—ä—â –¥–æ–º–µ–π–Ω)
  const targetURL = new URL(url, location.href);
  targetURL.searchParams.set('_ts', Date.now().toString());

  // proxy –≤ —Ç–æ–∑–∏ —Ä–µ–¥ (–º–∞–∫—Å. –±–ª–∏–∑–æ –¥–æ —Ç–≤–æ—è—Ç–∞ –ª–æ–≥–∏–∫–∞)
  const chain = [
    // —Ç–≤–æ–π Cloudflare Worker (–∞–∫–æ –µ –∞–∫—Ç–∏–≤–µ–Ω)
    (u) => `https://tight-wildflower-8f1a.s-milchev1.workers.dev/?url=${encodeURIComponent(u)}&nocache=${Date.now()}`,
    // Codetabs
    (u) => `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(u)}`,
    // AllOrigins
    (u) => `https://api.allorigins.win/raw?url=${encodeURIComponent(u)}`
  ];

  let html = '';
  let lastErr = null;

  for (const make of chain) {
    const prox = make(targetURL.href);
    try {
      const res = await fetch(prox, {
        mode: 'cors',
        cache: 'reload',
        credentials: 'omit',
        headers: {
          'pragma': 'no-cache',
          'cache-control': 'no-cache'
        }
      });
      if (!res.ok) throw new Error('HTTP '+res.status);
      const text = await res.text();
      if (!text || text.length < 64) throw new Error('–ü—Ä–∞–∑–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä');
      html = text;
      break;
    } catch (e) {
      lastErr = e;
      // –ø—Ä–æ–±–≤–∞–º–µ —Å–ª–µ–¥–≤–∞—â–∏—è proxy
    }
  }

  if (!html) {
    setStatus('‚ùå CORS/HTTP –≥—Ä–µ—à–∫–∞: ' + (lastErr?.message || lastErr || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'));
    return;
  }

  // –∞–∫–æ –º–µ–∂–¥—É–≤—Ä–µ–º–µ–Ω–Ω–æ –µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–∞ –Ω–æ–≤–∞ –∑–∞—è–≤–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä–∞–π —Ç–∞–∑–∏
  if (reqId !== __newsReqId) return;

  try{
    const doc = parseHTML(html);
    renderCardsFromDoc(doc, targetURL.href);
    setStatus('');
  }catch(e){
    setStatus('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–≤–∞–Ω–µ: '+e.message);
  }
}

// –†–µ–Ω–¥–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–∏—Ç–µ
function renderCardsFromDoc(doc, baseHref){
  const listEl = $('#list');
  listEl.innerHTML = '';
  const raw = selectRawBlocks(doc);
  if(!raw.length){
    listEl.innerHTML = '<div class="placeholder">–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –µ–ª–µ–º–µ–Ω—Ç–∏.</div>';
    return;
  }
  raw.forEach(node => listEl.appendChild(toCardElement(node.outerHTML, baseHref)));
  populateCategories();
}
